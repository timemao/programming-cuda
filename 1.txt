// init input matrix
printf("Generate input matrix data for matrix M and N.\n");
GenMatrixFile(input_fn,Pw,Ph,if_quiet);
unsigned int *matrix=ReadMatrixFile(input_fn,Pw,Ph,true);
for (i=0;i<Mw;i++)
{
    for(j=0;j<Mw;j++)
    {
        hostM[i*Mw+j]=hostN[i*Mw+j]=(float)matrix[i*Mw+j];
        free(matrix);
        matrix=NULL;
    }
}
// =======
// matrix multiply

// =====
printf("Computing matrix multiplication M*N:\n");
if(Pw*Ph>512*512)
{
    printf("(it takes time since matrix is larger than 512 by 512.\n")
}
CUT_SAFE_CALL(cutCreateTimer(&timer_compute));
CUT_SAFE_CALL(cutStartTimer(timer_compute));

float *reference=(float*) malloc(mem_size_P);
computeGold(reference,hostM,hostN,Mh,Mw,Nw);
CUT_SAFE_CALL(cutStopTimer(timer_compute));

printf("CPU processing time: %f(ms)\n",cutGetTimerValue(timer_compute));
CUT_SAFE_CALL(cutDeleteTimer(timer_compute));
printf("Matrix data checksum: %g\n",CheckSum(reference,Mw,Nw));
if (!if_quiet){
    printf("Matrix data contents: \n"):
    printf("  ");
}
matrix=(unsigned int*) malloc(Pw*Ph*sizeof(unsigned int));
for (i=0;i<Ph;i++){
    for(j=0;j<Pw;j++){
        matrix[i*Pw+j]=(unsigned int) reference[i*Pw+j];
        if(!if_quiet) printf("%u ",matrix[i*Pw+j]);
    }
    if(!if_quiet) printf("\n");
}
if(!if_quiet) printf("\n");

WriteMatrixFile(gold_fn,matrix,Pw,Ph,1);
free(matrix);matrix=NULL;
free(reference);

// clear memory
free(hostM); free(hostN); free(hostP);
free(input_fn); free(gold_fn);

return 0;
}